name: Cleanup PR Container Images

on:
  pull_request:
    types:
      - closed

permissions:
  packages: write

jobs:
  cleanup:
    name: Delete PR Container Images
    runs-on: ubuntu-24.04
    steps:
      - name: Delete PR container images
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            console.log(`Cleaning up container images for PR #${prNumber}`);
            
            try {
              // Get all versions of the package
              const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                package_type: 'container',
                package_name: repo,
                org: owner,
              }).catch(async (error) => {
                // If organization endpoint fails, try user endpoint
                if (error.status === 404) {
                  return await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                    package_type: 'container',
                    package_name: repo,
                    username: owner,
                  });
                }
                throw error;
              });
              
              console.log(`Found ${versions.length} total package versions`);
              
              // Filter versions that belong to this PR
              const prTag = `pr-${prNumber}`;
              const prVersions = versions.filter(version => 
                version.metadata?.container?.tags?.some(tag => tag.startsWith(prTag))
              );
              
              console.log(`Found ${prVersions.length} versions for PR #${prNumber}`);
              
              // Delete each version
              for (const version of prVersions) {
                const tags = version.metadata?.container?.tags || [];
                console.log(`Deleting version ${version.id} with tags: ${tags.join(', ')}`);
                
                try {
                  await github.rest.packages.deletePackageVersionForOrg({
                    package_type: 'container',
                    package_name: repo,
                    org: owner,
                    package_version_id: version.id,
                  }).catch(async (error) => {
                    // If organization endpoint fails, try user endpoint
                    if (error.status === 404) {
                      return await github.rest.packages.deletePackageVersionForUser({
                        package_type: 'container',
                        package_name: repo,
                        username: owner,
                        package_version_id: version.id,
                      });
                    }
                    throw error;
                  });
                  
                  console.log(`Successfully deleted version ${version.id}`);
                } catch (error) {
                  console.error(`Failed to delete version ${version.id}: ${error.message}`);
                }
              }
              
              if (prVersions.length === 0) {
                console.log(`No container images found for PR #${prNumber}`);
              } else {
                console.log(`Cleanup complete for PR #${prNumber}`);
              }
            } catch (error) {
              console.error(`Error during cleanup: ${error.message}`);
              core.setFailed(error.message);
            }
