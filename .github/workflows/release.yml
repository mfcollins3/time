# Copyright 2025 Michael F. Collins, III
#
# Time Source-Available Temporary License (v0.1)
#
# IMPORTANT: This is a source-available license and is not an open source
# license. The rights granted below are limited, temporary, and subject to
# change upon a future commercial release of the software.
#
# 1. Definitions
#
# - "Software" means the Time product, including its source code, build
#   scripts, configuration, and associated assets contained in this
#   repository.
# - "Derivative Works" means any work based upon the Software, including
#   modifications, adaptations, enhancements, or other works that are based on
#   or incorporate the Software, in whole or in part.
# - "Internal Use" means use by an individual or within a single legal entity
#   (including its employees and contractors acting on its behalf) for its own
#   business or personal operations, and not for providing the Software or any
#   substantial part of it to any third party as a hosted service, product, or
#   commercial offering.
# - "Integrations and Extensions" means separately distributed modules,
#   plugins, connectors, or tools that interact with the Software through
#   documented interfaces, data formats, or APIs, but which are not a
#   substantial copy of the Software itself.
# - "Commercial Release" means a future releaase of the Software made
#   available by the copyright holder under a different license, including a
#   commercial license.
#
# 2. License Grant (Temporary, Source-Available)
#
# Subject to the terms and conditions of this License, the copyright holder
# grants you a limited, non-exclusive, non-transferable, revocable license to:
#
# - Read and inspect the source code to learn how the Software is built and
#   understand the underlying technology (educational use);
# - Use, compile, and run the Software for your Internal Use;
# - Create Derivative Works of the Software for your Internal Use;
# - Develop Integrations and Extensions that interface with the Software;
# - Share your Derivative Works with other individuals or organizations solely
#   for their Internal Use, provided that (a) you and the recipient do not
#   charge any fees or other consideration for such Derivative Works or their
#   use, (b) you include this License and all applicable copyright notices
#   with any distribution, and (c) the recipient is bound by terms no less
#   protective of the Software and the copyright holder than these.
#
# This License is temporary and remains in effect only until the Commercial
# Release, as described below.
#
# 3. Restrictions
#
# Except as expressly permitted above, you may not:
#
# - Use the Software, Derivative Works, or Integration and Extensions for any
#   commercial purpose, including selling access, offering as-a-service
#   (SaaS), charging for hosting, support, or distribution, or otherwise
#   monetizing the Software or Derivative Works;
# - Distribute the Software or Derivative Works to the public for general use,
#   whether free or paid, other than sharing Derivative Works solely for a
#   recipient's Internal Use as allowed above;
# - Re-license, sublicense, or otherwise transfer rights in the Software,
#   except as expressly allowed herein;
# - Remove, alter, or obscure any copyright, license, or attribution notices;
# - Use the Software, trademarks, logos, or trade dress of the Time product or
#   the copyright holder in any way that suggests endorsement or affiliation
#   without prior written permission;
# - Use the Software to create a substantially similar competing product that
#   you distribute or offer to others.
#
# 4. Future Commercial License Requirement (Temporary Nature)
#
# This License is a temporary license intended to make the Software source
# available for learning, evaluation, and development of Integrations and
# Extensions prior to a commercial offering. Upon the Commercial Release:
#
# - Continued use of the Software or any Derivative Works derived from it
#   will require you (any any recipients with whom you have shared Derivative
#   Works) to obtain a commercial license within 30 days of the Commercial
#   Release; and
# - If you do not obtain a commercial license within that period, all rights
#   granted under this License automatically terminate, and you must cease use
#   and distribution of the Software and any Derivative Works.
#
# Noting in this License obligates the copyright holder to make a Commercial
# Release, but if/when a Commercial Release occurs, it will be under different
# terms, which may include paid licensing requirements.
#
# 5. Contributions
#
# If you submit, propose, or otherwise contribute bug fixes, features,
# enhancements, documentation, or other materials to the Software 
# ("Contributions"):
#
# - You represent that you have the necessary rights to make the Contributions
#   and that your Contributions do not infringe third-party rights;
# - You agree your Contributions will be made available under the same License
#   as the Software at the time of contribution, without compensation to you;
# - You grant the copyright holder a perpetual, irrevocable, royalty-free,
#   worldwide, non-exclusive license to use, reproduce, modify, distribute,
#   sublicense, and create derivative works from your Contributions, and to
#   include them in the Software and in future versions and distributions;
# - You agree that making a Contribution does not grant you any ownership,
#   co-ownership, or any other rights in or to the Software, any subsequent
#   releases, or any licenses to continue using the Software beyond the rights
#   expressly granted by this License.
#
# 6. Ownership
#
# The Software is licensed, not sold. All rights, title, and interest in and
# to the Software (including all intellectual property rights) are and shall
# remain with the copyright holder and its licensors. Except for the limited
# rights expressly granted herin, no other rights are granted by implciation,
# estoppel, or otherwise.
#
# 7. Warranty Disclaimer
#
# THE SOFTWARE IS PROVIDED "AS IS" AND "AS AVAILABLE", WITHOUT WARRANTY OF ANY
# KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, AND
# NON-INFRINGEMENT. YOU ASSUME ALL RISKS ASSOCIATED WITH THE USE OF THE
# SOFTWARE.
#
# 8. Limitation of Liability
#
# TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR ITS CONTRIBUTORS BE LIABLE FOR ANY INDIRECT, INCIDENTAL,
# SPECIAL, CONSEQUENTIAL, EXEMPLARY, OR PUNITIVE DAMAGES, OR ANY LOSS OF
# PROFITS, REVENUE, DATA, GOODWILL, OR BUSINESS INTERRUPTION, ARISING OUT OF
# OR RELATED TO THIS LICENSE OR THE USE OF OR INABILITY TO USE THE SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. THE TOTAL AGGREGATE
# LIABILITY OF THE COPYRIGHT HOLDER FOR ANY CLAIMS ARISING OUR OF OR RELATING
# TO THIS LICENSE OR THE SOFTWARE SHALL NOT EXCEED ONE HUNDRED U.S. DOLLARS
# (UD$100).
#
# 9. Termination
#
# This License automatically terminates if you breach any of its terms or
# upon the conditions described in Section 4. Upon termination, you must
# immediately cease all use and distribution of the Software and Derivative
# Works and destroy all copies in your possession or control. Sections that by
# their nature should survive termination shall survive (including, without
# limitation, Sections 5-8 and 10-12).
#
# 10. Third-Party Components
#
# The Software may include or depend on third-party components that are
# provided under their own licenses. Such licenses govern those components,
# and nothing in this License purports to limit your rights under, or impose
# obligations beyond, the applicable third-party licenses.
#
# 11. Export and Compliance
#
# You are responsible for complying with all applicable laws and regulations,
# including export control laws, in connection with your use of the Software.
#
# 12. Entire Agreement; Changes
#
# This License constitutes the entire agreement between you and the copyright
# holder regarding the Software. The copyright holder may update this License
# for future releases. Your continued use of future releases is subject to the
# then-current license accompanying those releases.
#
# For inquiries about commercial licensing, please contact the copyright
# holder.

name: Release

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # Extract version from release branch name
  extract-version:
    name: Extract Version
    runs-on: ubuntu-24.04
    if: startsWith(github.head_ref, 'release/') || startsWith(github.ref, 'refs/heads/release/')
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_release_branch: ${{ steps.extract.outputs.is_release_branch }}
    steps:
      - name: Extract version from branch name
        id: extract
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi
          
          echo "Branch name: $BRANCH_NAME"
          
          if [[ "$BRANCH_NAME" =~ ^release/([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
            echo "is_release_branch=true" >> "$GITHUB_OUTPUT"
            echo "Extracted version: $VERSION"
          else
            echo "Not a release branch"
            echo "is_release_branch=false" >> "$GITHUB_OUTPUT"
          fi

  # Build Linux binaries
  build-linux:
    name: Build Linux Binaries
    needs: extract-version
    if: |
      needs.extract-version.outputs.is_release_branch == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false
    uses: ./.github/workflows/linux-builds.yml
    with:
      build-tags: ''

  # Build macOS binaries
  build-macos:
    name: Build macOS Binaries
    needs: extract-version
    if: |
      needs.extract-version.outputs.is_release_branch == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false
    uses: ./.github/workflows/macos-builds.yml
    secrets: inherit

  # Build Windows binaries
  build-windows:
    name: Build Windows Binaries
    needs: extract-version
    if: |
      needs.extract-version.outputs.is_release_branch == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false
    uses: ./.github/workflows/windows-builds.yml

  # Build and push Docker container
  build-docker:
    name: Build Docker Container
    needs: 
      - extract-version
      - build-linux
    if: |
      needs.extract-version.outputs.is_release_branch == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false
    uses: ./.github/workflows/docker-container.yml
    with:
      skip-build: false
    secrets: inherit

  # Create or update draft release
  manage-release:
    name: Manage GitHub Release
    needs: 
      - extract-version
      - build-linux
      - build-macos
      - build-windows
      - build-docker
    runs-on: ubuntu-24.04
    if: |
      needs.extract-version.outputs.is_release_branch == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for tag comparison

      - name: Download Linux AMD64 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: time-linux-amd64*
          path: ./artifacts

      - name: Download Linux ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: time-linux-arm64*
          path: ./artifacts

      - name: Download macOS ARM64 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: time-macos-arm64*
          path: ./artifacts

      - name: Download Windows x64 artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: time-windows-x64*
          path: ./artifacts

      - name: Create release archives
        env:
          VERSION: ${{ needs.extract-version.outputs.version }}
        run: |
          mkdir -p release-archives
          
          # Ensure all binaries have execute permissions before archiving
          chmod +x artifacts/time-linux-amd64/time
          chmod +x artifacts/time-linux-amd64-debug/time
          chmod +x artifacts/time-linux-arm64/time
          chmod +x artifacts/time-linux-arm64-debug/time
          chmod +x artifacts/time-macos-arm64/time
          chmod +x artifacts/time-macos-arm64-debug/time
          
          # Linux AMD64
          cd artifacts/time-linux-amd64
          tar -czf ../../release-archives/time-${VERSION}-linux-amd64.tar.gz time
          cd ../..
          
          cd artifacts/time-linux-amd64-debug
          tar -czf ../../release-archives/time-${VERSION}-linux-amd64-debug.tar.gz time
          cd ../..
          
          # Linux ARM64
          cd artifacts/time-linux-arm64
          tar -czf ../../release-archives/time-${VERSION}-linux-arm64.tar.gz time
          cd ../..
          
          cd artifacts/time-linux-arm64-debug
          tar -czf ../../release-archives/time-${VERSION}-linux-arm64-debug.tar.gz time
          cd ../..
          
          # macOS ARM64
          cd artifacts/time-macos-arm64
          zip ../../release-archives/time-${VERSION}-macos-arm64.zip time
          cd ../..
          
          cd artifacts/time-macos-arm64-debug
          zip ../../release-archives/time-${VERSION}-macos-arm64-debug.zip time
          cd ../..
          
          # Windows x64
          cd artifacts/time-windows-x64
          zip ../../release-archives/time-${VERSION}-windows-x64.zip time.exe
          cd ../..
          
          cd artifacts/time-windows-x64-debug
          zip ../../release-archives/time-${VERSION}-windows-x64-debug.zip time.exe
          cd ../..
          
          # List created archives
          ls -lh release-archives/

      - name: Generate release notes
        id: release_notes
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ needs.extract-version.outputs.version }}
        run: |
          # Get the previous tag to generate changelog from
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, generating notes from initial commit"
            TARGET_PARAM=""
          else
            echo "Generating notes from previous tag: $PREVIOUS_TAG"
            TARGET_PARAM="--previous-tag $PREVIOUS_TAG"
          fi
          
          # Generate release notes using GitHub API
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name="v${VERSION}" \
            -f target_commitish="${{ github.head_ref || github.ref_name }}" \
            ${TARGET_PARAM:+-f previous_tag_name="$PREVIOUS_TAG"} \
            --jq '.body' > generated-notes.md
          
          # Create the full release notes with download instructions
          cat > release-notes.md << 'EOF'
          ## Time v${{ needs.extract-version.outputs.version }}
          
          ### Download
          
          Choose the appropriate binary for your platform:
          
          #### Linux
          - **AMD64 (x86_64)**: `time-${{ needs.extract-version.outputs.version }}-linux-amd64.tar.gz`
          - **ARM64**: `time-${{ needs.extract-version.outputs.version }}-linux-arm64.tar.gz`
          
          #### macOS
          - **ARM64 (Apple Silicon)**: `time-${{ needs.extract-version.outputs.version }}-macos-arm64.zip`
          
          #### Windows
          - **x64**: `time-${{ needs.extract-version.outputs.version }}-windows-x64.zip`
          
          #### Docker
          ```bash
          docker pull ghcr.io/mfcollins3/time:${{ needs.extract-version.outputs.version }}
          ```
          
          ### Debug Builds
          
          Debug builds with symbols are also available:
          - `time-${{ needs.extract-version.outputs.version }}-linux-amd64-debug.tar.gz`
          - `time-${{ needs.extract-version.outputs.version }}-linux-arm64-debug.tar.gz`
          - `time-${{ needs.extract-version.outputs.version }}-macos-arm64-debug.zip`
          - `time-${{ needs.extract-version.outputs.version }}-windows-x64-debug.zip`
          
          ### Installation
          
          #### Linux/macOS
          ```bash
          # Extract the archive
          tar -xzf time-${{ needs.extract-version.outputs.version }}-linux-amd64.tar.gz
          # or
          unzip time-${{ needs.extract-version.outputs.version }}-macos-arm64.zip
          
          # Move to a directory in your PATH
          sudo mv time /usr/local/bin/
          
          # Make executable (if needed)
          chmod +x /usr/local/bin/time
          ```
          
          #### Windows
          ```powershell
          # Extract the archive
          Expand-Archive -Path time-${{ needs.extract-version.outputs.version }}-windows-x64.zip -DestinationPath .
          
          # Add to PATH or move to a directory already in PATH
          ```
          
          ---
          
          EOF
          
          # Append the GitHub-generated release notes
          cat generated-notes.md >> release-notes.md
          
          echo ""
          echo "=== Generated Release Notes ==="
          cat release-notes.md

      - name: Check if release exists
        id: check_release
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ needs.extract-version.outputs.version }}
        run: |
          if gh release view "v${VERSION}" &> /dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "Release v${VERSION} exists"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "Release v${VERSION} does not exist"
          fi

      - name: Create draft release
        if: steps.check_release.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ needs.extract-version.outputs.version }}
        run: |
          gh release create "v${VERSION}" \
            --draft \
            --title "Time v${VERSION}" \
            --notes-file release-notes.md \
            release-archives/*

      - name: Update existing draft release
        if: steps.check_release.outputs.exists == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ needs.extract-version.outputs.version }}
        run: |
          # Delete existing assets
          gh release view "v${VERSION}" --json assets --jq '.assets[].name' | while read asset; do
            echo "Deleting asset: $asset"
            gh release delete-asset "v${VERSION}" "$asset" --yes || true
          done
          
          # Update release notes
          gh release edit "v${VERSION}" \
            --notes-file release-notes.md
          
          # Upload new assets
          gh release upload "v${VERSION}" release-archives/* --clobber

  # Publish final release when PR is merged
  publish-release:
    name: Publish GitHub Release
    needs: extract-version
    runs-on: ubuntu-24.04
    if: |
      needs.extract-version.outputs.is_release_branch == 'true' &&
      github.event_name == 'pull_request' &&
      github.event.pull_request.merged == true &&
      github.event.pull_request.base.ref == 'main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main
          fetch-depth: 0

      - name: Publish release
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ needs.extract-version.outputs.version }}
        run: |
          # Publish the draft release (make it non-draft)
          gh release edit "v${VERSION}" --draft=false
          
          echo "✅ Released Time v${VERSION}"
          echo "Release URL: https://github.com/mfcollins3/time/releases/tag/v${VERSION}"

      - name: Create Git tag
        env:
          VERSION: ${{ needs.extract-version.outputs.version }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Fetch all tags from remote
          git fetch --tags
          
          # Extract version components
          if [[ "${VERSION}" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
          else
            echo "❌ Invalid version format: ${VERSION}"
            exit 1
          fi
          
          # Create and push full version tag (v<major>.<minor>.<patch>)
          if ! git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            git tag -a "v${VERSION}" -m "Release v${VERSION}"
            git push origin "v${VERSION}"
            echo "✅ Created and pushed tag v${VERSION}"
          else
            echo "ℹ️ Tag v${VERSION} already exists"
          fi
          
          # Create/update major.minor tag (v<major>.<minor>)
          MINOR_TAG="v${MAJOR}.${MINOR}"
          if git rev-parse "${MINOR_TAG}" >/dev/null 2>&1; then
            echo "ℹ️ Updating existing tag ${MINOR_TAG}"
            git tag -fa "${MINOR_TAG}" -m "Release v${VERSION}"
            git push origin "${MINOR_TAG}" --force
          else
            git tag -a "${MINOR_TAG}" -m "Release v${VERSION}"
            git push origin "${MINOR_TAG}"
            echo "✅ Created and pushed tag ${MINOR_TAG}"
          fi
          
          # Create/update major tag (v<major>)
          MAJOR_TAG="v${MAJOR}"
          if git rev-parse "${MAJOR_TAG}" >/dev/null 2>&1; then
            echo "ℹ️ Updating existing tag ${MAJOR_TAG}"
            git tag -fa "${MAJOR_TAG}" -m "Release v${VERSION}"
            git push origin "${MAJOR_TAG}" --force
          else
            git tag -a "${MAJOR_TAG}" -m "Release v${VERSION}"
            git push origin "${MAJOR_TAG}"
            echo "✅ Created and pushed tag ${MAJOR_TAG}"
          fi
